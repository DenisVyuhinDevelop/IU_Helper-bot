import asyncio, random, os
from dotenv import load_dotenv
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from constants import BLOCK_USERS
import App.keyboards as kb
import App.Components.payment as pay

load_dotenv
router = Router()
bot = Bot(token=os.getenv('BOT_TOKEN'))


@router.message(CommandStart())
async def start(message : Message):
   msg = isBlock(message, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! –≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É.\n\n/buy - –∑–∞–∫–∞–∑–∞—Ç—å –¥–∑\n/price - —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã\n/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
   await message.answer(text=msg)


@router.message(Command('price'))
async def price(message : Message):
   msg = isBlock(message, 'üíµ<b>–ü—Ä–∞–π—Å:</b>\n\n–¢–µ—Å—Ç—ã - 100‚ÇΩ\n–î–ó - 350‚ÇΩ\n–ö–† - 450‚ÇΩ\n–ê–† - 500‚ÇΩ\n\n<b>–ß–µ—Ç–≤–µ—Ä—Ç–∏ (9 –∫–ª–∞—Å—Å)</b>\n1 –ß–µ—Ç–≤–µ—Ä—Ç—å - 1000‚ÇΩ\n2 –ß–µ—Ç–≤–µ—Ä—Ç—å - 1000‚ÇΩ\n3 –ß–µ—Ç–≤–µ—Ä—Ç—å - 1450‚ÇΩ\n4 –ß–µ—Ç–≤–µ—Ä—Ç—å - 550‚ÇΩ')
   await message.answer(text=msg, parse_mode='html')


@router.message(Command('buy'))
async def buy(message : Message):
   await kb.reset_weeks_9_grade()
   
   if not isBlockById(message.from_user.id):
      await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:', reply_markup=kb.choice_grade_keyboard)
   else:
      await message.answer(text=isBlock(message, ''))


@router.callback_query(F.data == '8 –∫–ª–∞—Å—Å')
async def is_8_grade(callback : CallbackQuery):
   await callback.answer('‚ùå 8 –∫–ª–∞—Å—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')


@router.callback_query(F.data == '9 –∫–ª–∞—Å—Å')
async def is_9_grade(callback : CallbackQuery):
   await callback.answer()
   
   if not isBlockById(callback.from_user.id):
      await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ç–≤–µ—Ä—Ç—å:', reply_markup=kb.choice_quarter_grade_9_keyboard)


@router.callback_query(F.data == '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–∞')
async def back_to_choice_grade(callback : CallbackQuery):
   await callback.answer()
   
   if not isBlockById(callback.from_user.id):
      await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:', reply_markup=kb.choice_grade_keyboard)


@router.callback_query(F.data.in_(kb.quarters_9_grade))
async def quar_1_grade_9(callback : CallbackQuery):
   await callback.answer()
   
   index = kb.quarters_9_grade.index(callback.data)
   kb.ind = callback.data
   # –û—á–∏—â–∞–µ–º –≥–∞–ª–æ—á–∫–∏, –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏
   #for i in range(len(kb.quarters_9_grade)):
   #   if kb.quarters_9_grade[i] != callback.data:
   #      kb.quarters_9_grade[i] = kb.quarters_9_grade[i].replace(' ‚úÖ', '')
   #   else:
   #      kb.quarters_9_grade[i] += ' ‚úÖ'
   
   await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª–∏:', reply_markup=await kb.weeks_91_keyboard())
   print(kb.quarters_9_grade, '\n', kb.ind)


@router.callback_query(F.data.in_(kb.weeks_9_grade[2]))
async def choices_weeks_91(callback : CallbackQuery):
   print(kb.ind)
   
   await callback.answer()
   
   quar_index = kb.quarters_9_grade.index(kb.ind)
   week_index = kb.weeks_9_grade[quar_index].index(callback.data)
   
   if ' ‚úÖ' in kb.weeks_9_grade[quar_index][week_index]:
      kb.weeks_9_grade[quar_index][week_index] = kb.weeks_9_grade[quar_index][week_index].replace(' ‚úÖ', '')
   else:
      kb.weeks_9_grade[quar_index][week_index] += ' ‚úÖ'
   
   await callback.message.edit_reply_markup(reply_markup=await kb.weeks_91_keyboard())
   


@router.callback_query(F.data == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑')
async def cancel_order(callback : CallbackQuery):
   await callback.answer()
   pay.is_order = False
   for i in range(len(kb.quarters_9_grade)): kb.quarters_9_grade[i] = kb.quarters_9_grade[i].replace(' ‚úÖ', '')
   await kb.reset_weeks_9_grade()
   await callback.message.edit_text('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.')


@router.callback_query(F.data == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑')
async def confirm_order(callback : CallbackQuery):
   await callback.answer()
   
   weeks_in_order = [i.replace(' –Ω–µ–¥–µ–ª—è ‚úÖ', '') for i in kb.weeks_9_grade[0] if '‚úÖ' in i]
   test_price = sum(100 for i in weeks_in_order if f'{i} –Ω–µ–¥–µ–ª—è' in kb.TST_weeks_9)
   work_price = sum(350 for i in weeks_in_order if f'{i} –Ω–µ–¥–µ–ª—è' in kb.HMW_weeks_9)
   
   pay.is_order = True
   order_price = test_price + work_price
   formatted_weeks = ', '.join(weeks_in_order)
   label = f"{callback.from_user.id}_{random.randint(1000, 9999)}" # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
   link = await pay.create_order(order_price, label)               # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
   
   if not isBlockById(callback.from_user.id):
      await callback.message.edit_text(
         f'üìö<b>–ó–∞–∫–∞–∑:</b>\n–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 9 –∫–ª–∞—Å—Å: {formatted_weeks}\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n{order_price}‚ÇΩ\n\n<i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω.</i>',
         parse_mode='html',
         reply_markup=await kb.create_order_keyboard(link)
      )
      
   # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
   await asyncio.sleep(60)
   token = os.getenv("YOOMONEY_TOKEN") # –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   is_paid = await pay.check_payment(token, label)
   
   if is_paid:
      await callback.message.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª! –°–ø–∞—Å–∏–±–æ.")
      try:
         await bot.send_message(chat_id=-1002321866801,
                                message_thread_id=3,
                                text=f'<b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!</b>\n{order_price}‚ÇΩ\n\n<span class="tg-spoiler"><b>–ó–∞–∫–∞–∑:</b>\n–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 9 –∫–ª–∞—Å—Å: {formatted_weeks}\n\n<b>–ó–∞–∫–∞–∑—á–∏–∫:</b>\n{callback.from_user.full_name} (@{callback.from_user.username})</span>', parse_mode='html')
      except Exception as e:
         print(f'Error append history: {e}')
   elif pay.is_order:
      await callback.message.answer("–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @KodersUp")

   
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ–ª–æ–≤–µ–∫–∞
def isBlock(message : Message, msg):
   if message.from_user.id in BLOCK_USERS:
      return f'‚ùå {message.from_user.first_name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–µ–±–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º =('
   else:
      return msg

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID
def isBlockById(id): return id in BLOCK_USERS